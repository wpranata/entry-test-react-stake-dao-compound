/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StakeDaoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISTRIBUTION_START"
      | "EMISSION_PERIOD"
      | "REWARD_EMISSION"
      | "TOKEN"
      | "claimReward"
      | "claimableReward"
      | "compoundReward"
      | "getCurrentTotalRewardPerToken"
      | "getDeltaPeriodWithRemainder"
      | "getDeltaSeconds"
      | "getLatestStakerReward"
      | "getPeriodSecondsRemainder"
      | "initialize"
      | "stake"
      | "stakers"
      | "total"
      | "unstake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claimed"
      | "Compounded"
      | "Initialized"
      | "Staked"
      | "Unstaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISTRIBUTION_START",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMISSION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_EMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTotalRewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeltaPeriodWithRemainder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeltaSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestStakerReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodSecondsRemainder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "total", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMISSION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_EMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTotalRewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeltaPeriodWithRemainder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeltaSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestStakerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodSecondsRemainder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CompoundedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakeDao extends BaseContract {
  connect(runner?: ContractRunner | null): StakeDao;
  waitForDeployment(): Promise<this>;

  interface: StakeDaoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISTRIBUTION_START: TypedContractMethod<[], [bigint], "view">;

  EMISSION_PERIOD: TypedContractMethod<[], [bigint], "view">;

  REWARD_EMISSION: TypedContractMethod<[], [bigint], "view">;

  TOKEN: TypedContractMethod<[], [string], "view">;

  claimReward: TypedContractMethod<[], [void], "nonpayable">;

  claimableReward: TypedContractMethod<
    [staker_: AddressLike],
    [bigint],
    "view"
  >;

  compoundReward: TypedContractMethod<[], [void], "nonpayable">;

  getCurrentTotalRewardPerToken: TypedContractMethod<
    [],
    [[bigint, bigint]],
    "view"
  >;

  getDeltaPeriodWithRemainder: TypedContractMethod<
    [since_: BigNumberish, periodSecondsRemainder_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getDeltaSeconds: TypedContractMethod<
    [since_: BigNumberish],
    [bigint],
    "view"
  >;

  getLatestStakerReward: TypedContractMethod<
    [staker_: AddressLike],
    [bigint],
    "view"
  >;

  getPeriodSecondsRemainder: TypedContractMethod<
    [seconds_: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      token_: AddressLike,
      rewardEmission_: BigNumberish,
      emissionPeriod_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;

  stakers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        staked: bigint;
        claimableReward: bigint;
        rewardPerToken: bigint;
        latestUpdateTime: bigint;
        latestPeriodSecondsRemainder: bigint;
      }
    ],
    "view"
  >;

  total: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        staked: bigint;
        rewardPerToken: bigint;
        latestUpdateTime: bigint;
        latestPeriodSecondsRemainder: bigint;
      }
    ],
    "view"
  >;

  unstake: TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISTRIBUTION_START"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EMISSION_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_EMISSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimableReward"
  ): TypedContractMethod<[staker_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "compoundReward"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentTotalRewardPerToken"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getDeltaPeriodWithRemainder"
  ): TypedContractMethod<
    [since_: BigNumberish, periodSecondsRemainder_: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeltaSeconds"
  ): TypedContractMethod<[since_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestStakerReward"
  ): TypedContractMethod<[staker_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPeriodSecondsRemainder"
  ): TypedContractMethod<[seconds_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      token_: AddressLike,
      rewardEmission_: BigNumberish,
      emissionPeriod_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        staked: bigint;
        claimableReward: bigint;
        rewardPerToken: bigint;
        latestUpdateTime: bigint;
        latestPeriodSecondsRemainder: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "total"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        staked: bigint;
        rewardPerToken: bigint;
        latestUpdateTime: bigint;
        latestPeriodSecondsRemainder: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[amount_: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Compounded"
  ): TypedContractEvent<
    CompoundedEvent.InputTuple,
    CompoundedEvent.OutputTuple,
    CompoundedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Compounded(address,uint256)": TypedContractEvent<
      CompoundedEvent.InputTuple,
      CompoundedEvent.OutputTuple,
      CompoundedEvent.OutputObject
    >;
    Compounded: TypedContractEvent<
      CompoundedEvent.InputTuple,
      CompoundedEvent.OutputTuple,
      CompoundedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unstaked(address,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
  };
}
